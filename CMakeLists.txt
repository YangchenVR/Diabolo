# <Copyright Holder>. Copyright (C) <Copyright Year(s)>. <License>.

#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.6.2)
PROJECT (Diabolo)
SET (APPLICATION_NAME "Diabolo")
SET (APPLICATION_CODENAME "${PROJECT_NAME}")
SET (APPLICATION_COPYRIGHT_YEARS "2012-2016")
SET (APPLICATION_VERSION_MAJOR 1)
SET (APPLICATION_VERSION_MINOR 0)
SET (APPLICATION_VERSION_PATCH 0)
SET (APPLICATION_VERSION_TYPE SNAPSHOT)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "com.yourcompany")
SET (APPLICATION_VENDOR_NAME "Your Company")
SET (APPLICATION_VENDOR_URL "yourcompany.com")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")

SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)

IF(BUILD_CONF_701)
	INCLUDE(conf_in_701.cmake)
ELSEIF(BUILD_CONF_202)
	INCLUDE(conf_in_202.cmake)
ELSE()
	MESSAGE(STATUS "##### using common configuration data! ######")
ENDIF(BUILD_CONF_701)

#
# Debugging Options
#
SET (CMAKE_VERBOSE_MAKEFILE 0) # Use 1 for debugging, 0 for release

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")
SET (CMAKE_MODULE_PATH "${MAINFOLDER}/module")
#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
#LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tools")
#LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/thirdparty")
#SET (CMAKE_MODULE_PATH "${MAINFOLDER}/tools/share/cmake")
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")

#
# Locate Project Prerequisites 
#

SET (Boost_ADDITIONAL_VERSIONS "1.39" "1.39.0" "1.40" "1.40.0" "1.41" "1.41.0" "1.42" "1.42.0" "1.43" "1.43.0" "1.44" "1.44.0" "1.45" "1.45.0" "1.46" "1.46.0" "1.47" "1.47.0" "1.48" "1.48.0" "1.49" "1.49.0" "1.50" "1.50.0" "1.58.0")
FIND_PACKAGE (Boost 1.58 COMPONENTS "date_time" "filesystem" "graph" "iostreams" "program_options" "regex" "serialization" "signals" "system" "thread" "wserialization" REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
#Eigen3
FIND_PACKAGE(Eigen3 REQUIRED)
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})
#freeglut
INCLUDE_DIRECTORIES(${FREEGLUT_INCLUDE_DIR})
#Igl
INCLUDE_DIRECTORIES(${IGL_INCLUDE_DIR})
#nanogui
INCLUDE_DIRECTORIES(${NANOGUI_INCLUDE_DIR})
#glew
INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIR})
#glfw3
INCLUDE_DIRECTORIES(${GLFW_INCLUDE_DIR})
#nanovg
INCLUDE_DIRECTORIES(${NANOVG_INCLUDE_DIR})
#SOIL
INCLUDE_DIRECTORIES(${SOIL_INCLUDE_DIR})
#Freetype_gl
INCLUDE_DIRECTORIES(${FREETYPE_GL_INCLUDE_DIR})
#GLM
INCLUDE_DIRECTORIES(${GLM_INCLUDE_DIR})
LINK_DIRECTORIES(${NANOGUI_LIBRARY_DIR})
LINK_DIRECTORIES(${GLFW_LIBRARY_DIR})
LINK_DIRECTORIES(${OPENGL32_LIBRARY_DIR})
LINK_DIRECTORIES(${FREETYPE_GL_LIBRARY_DIR})
LINK_DIRECTORIES(${SOIL_LIBRARY_DIR})
LINK_DIRECTORIES(${GLEW_LIBRARY_DIR})
LINK_DIRECTORIES(${FREEGLUT_LIBRARY_DIR})
SET (IGL_LIBRARIES nanogui glfw3 OpenGL32)
SET (FREETYPE_GL_LIBRARIES freetype-gl soil glew32 freeglut)
SET (GLSDK_LIBRARIES glloadD glutilD glmeshD freeglut glfw3 nanogui)

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS5 test/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS6 test/*.h.in.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
ADD_SUBDIRECTORY(src)
#ADD_SUBDIRECTORY(test)

#
# Add Install Targets
#
IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
    INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")

#
# Add Documentation Targets
#
#INCLUDE (DocumentationTargets)
